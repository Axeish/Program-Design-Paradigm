PDP Test Report for SET05


Test Name: walls-tests
Definitions:
	(define RADIUS 20)
	(define DIAMETER (* 2 RADIUS))
	(define CENTER-X 200)
	(define CENTER-Y 200)
	(define HEIGHT (* CENTER-Y 2))
	(define WIDTH (* CENTER-X 2))
	(define BALL-X-LEFT-EDGE RADIUS)
	(define BALL-X-RIGHT-EDGE (- WIDTH RADIUS))
	(define BALL-Y-TOP RADIUS)
	(define BALL-Y-BOT (- HEIGHT RADIUS))
	(define BALL-XVEL-MAX 10)
	(define BALL-YVEL-MAX 10)
	(define (random-ball)
	  (mk-ball
	   (+ RADIUS (* DIAMETER (random (quotient WIDTH DIAMETER))))
	   (+ RADIUS (* DIAMETER (random (quotient HEIGHT DIAMETER))))
	   (add1 (random BALL-XVEL-MAX))
	   (add1 (random BALL-YVEL-MAX))))
	(define (random-balls n) (build-list n random-ball))
	(define (next-world-n n w)
	  (if (zero? n) w (next-world-n (sub1 n) (next-world w))))
	(define (add-wall w x y) (mouse-handler w x y "button-down"))
	(define (rotate w) (key-handler w " "))
	(define (world-ball-x w) (get-ball-x (first (get-balls w))))
	(define (world-ball-y w) (get-ball-y (first (get-balls w))))
	(define WALL-VEL 16)
	(define WALL-TIME-TO-FULL (quotient HEIGHT WALL-VEL))
	(define VEL10 10)
	(define VEL1 1)
	(define BALL-BEFORE-VWALL1
	  (next-world-n
	   WALL-TIME-TO-FULL
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list
	      (mk-ball
	       (sub1 (- BALL-X-RIGHT-EDGE (* WALL-TIME-TO-FULL VEL10) RADIUS))
	       CENTER-Y
	       VEL10
	       VEL1)))
	    BALL-X-RIGHT-EDGE
	    CENTER-Y)))
	(define BALL-HITS-ACTIVE-VWALL1
	  (next-world-n
	   (sub1 WALL-TIME-TO-FULL)
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list
	      (mk-ball
	       (add1 (- BALL-X-RIGHT-EDGE (* (sub1 WALL-TIME-TO-FULL) VEL10) RADIUS))
	       CENTER-Y
	       VEL10
	       VEL1)))
	    BALL-X-RIGHT-EDGE
	    CENTER-Y)))
	(define BALL-BEFORE-VWALL2
	  (next-world-n
	   WALL-TIME-TO-FULL
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list
	      (mk-ball
	       (add1 (+ BALL-X-LEFT-EDGE (* WALL-TIME-TO-FULL VEL10) RADIUS))
	       CENTER-Y
	       (- VEL10)
	       VEL1)))
	    BALL-X-LEFT-EDGE
	    CENTER-Y)))
	(define BALL-HITS-ACTIVE-VWALL2
	  (next-world-n
	   (sub1 WALL-TIME-TO-FULL)
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list
	      (mk-ball
	       (sub1 (+ BALL-X-LEFT-EDGE (* (sub1 WALL-TIME-TO-FULL) VEL10) RADIUS))
	       CENTER-Y
	       (- VEL10)
	       VEL1)))
	    BALL-X-LEFT-EDGE
	    CENTER-Y)))
	(define BALL-BEFORE-HWALL1
	  (next-world-n
	   WALL-TIME-TO-FULL
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list
	       (mk-ball
	        CENTER-X
	        (sub1 (- BALL-Y-BOT (* WALL-TIME-TO-FULL VEL10) RADIUS))
	        VEL1
	        VEL10))))
	    CENTER-X
	    BALL-Y-BOT)))
	(define BALL-HITS-ACTIVE-HWALL1
	  (next-world-n
	   (sub1 WALL-TIME-TO-FULL)
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list
	       (mk-ball
	        CENTER-X
	        (add1 (- BALL-Y-BOT (* (sub1 WALL-TIME-TO-FULL) VEL10) RADIUS))
	        VEL1
	        VEL10))))
	    CENTER-X
	    BALL-Y-BOT)))
	(define BALL-BEFORE-HWALL2
	  (next-world-n
	   WALL-TIME-TO-FULL
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list
	       (mk-ball
	        CENTER-X
	        (add1 (+ BALL-Y-TOP (* WALL-TIME-TO-FULL VEL10) RADIUS))
	        VEL1
	        (- VEL10)))))
	    CENTER-X
	    BALL-Y-TOP)))
	(define BALL-HITS-ACTIVE-HWALL2
	  (next-world-n
	   (sub1 WALL-TIME-TO-FULL)
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list
	       (mk-ball
	        CENTER-X
	        (sub1 (+ BALL-Y-TOP (* (sub1 WALL-TIME-TO-FULL) VEL10) RADIUS))
	        VEL1
	        (- VEL10)))))
	    CENTER-X
	    BALL-Y-TOP)))
	(define BALL-HITS-ACTIVE-VWALL-FROM-ABOVE
	  (next-world
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list (mk-ball BALL-X-RIGHT-EDGE (- CENTER-Y RADIUS VEL10) VEL1 VEL10)))
	    BALL-X-RIGHT-EDGE
	    CENTER-Y)))
	(define BALL-HITS-ACTIVE-VWALL-FROM-BELOW
	  (next-world
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list
	      (mk-ball BALL-X-RIGHT-EDGE (+ CENTER-Y RADIUS VEL10) VEL1 (- VEL10))))
	    BALL-X-RIGHT-EDGE
	    CENTER-Y)))
	(define BALL-HITS-ACTIVE-HWALL-FROM-LEFT
	  (next-world
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list (mk-ball (- CENTER-X RADIUS VEL10) BALL-Y-BOT VEL10 VEL1))))
	    CENTER-X
	    BALL-Y-BOT)))
	(define BALL-HITS-ACTIVE-HWALL-FROM-RIGHT
	  (next-world
	   (add-wall
	    (rotate
	     (replace-balls
	      INITIAL-WORLD
	      (list (mk-ball (+ CENTER-X RADIUS VEL10) BALL-Y-BOT (- VEL10) VEL1))))
	    CENTER-X
	    BALL-Y-BOT)))
	(define BEFORE-LEVELUPTO2
	  (next-world-n
	   (sub1 WALL-TIME-TO-FULL)
	   (add-wall
	    (replace-balls
	     INITIAL-WORLD
	     (list (mk-ball BALL-X-LEFT-EDGE CENTER-Y 1 1)))
	    (add1 (+ BALL-X-LEFT-EDGE RADIUS WALL-TIME-TO-FULL))
	    CENTER-Y)))
	(define LEVEL2 (next-world BEFORE-LEVELUPTO2))
	(define LEVEL3
	  (next-world-n
	   WALL-TIME-TO-FULL
	   (add-wall
	    (rotate
	     (replace-balls
	      (next-world LEVEL2)
	      (list
	       (mk-ball CENTER-X BALL-Y-TOP 1 1)
	       (mk-ball CENTER-X BALL-Y-TOP 1 1))))
	    CENTER-X
	    (add1 (+ BALL-Y-TOP RADIUS WALL-TIME-TO-FULL)))))

Test Case: 
  (test-equal?
   "ball immediately left of full vert wall: y"
   (world-ball-y BALL-BEFORE-VWALL1)
   (+ CENTER-Y WALL-TIME-TO-FULL))
Test Result: Success

Test Case: 
  (test-equal?
   "ball flush against full vert wall from left side: x"
   (world-ball-x (next-world BALL-BEFORE-VWALL1))
   (- BALL-X-RIGHT-EDGE RADIUS))
Test Result: Failure
actual : 369
expected : 360
expression : (check-equal? (world-ball-x (next-world BALL-BEFORE-VWALL1)) (- BALL-X-RIGHT-EDGE RADIUS))
params : (369 360)

Test Case: 
  (test-pred
   "ball hits active vert wall from left side"
   end?
   BALL-HITS-ACTIVE-VWALL1)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-VWALL1)
params : (#<procedure:end?> #(struct:world (#(struct:ball 361 224 10 1)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 380 7 380 393) VERTICAL 1 #t))

Test Case: 
  (test-equal?
   "ball flush against full vert wall from right side: x"
   (world-ball-x (next-world BALL-BEFORE-VWALL2))
   (+ BALL-X-LEFT-EDGE RADIUS))
Test Result: Failure
actual : 31
expected : 40
expression : (check-equal? (world-ball-x (next-world BALL-BEFORE-VWALL2)) (+ BALL-X-LEFT-EDGE RADIUS))
params : (31 40)

Test Case: 
  (test-pred
   "ball hits active vert wall from right side"
   end?
   BALL-HITS-ACTIVE-VWALL2)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-VWALL2)
params : (#<procedure:end?> #(struct:world (#(struct:ball 39 224 -10 1)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 20 7 20 393) VERTICAL 1 #t))

Test Case: 
  (test-pred
   "ball hits active vert wall from above"
   end?
   BALL-HITS-ACTIVE-VWALL-FROM-ABOVE)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-VWALL-FROM-ABOVE)
params : (#<procedure:end?> #(struct:world (#(struct:ball 380 180 -1 10)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 380 191 380 209) VERTICAL 1 #t))

Test Case: 
  (test-pred
   "ball hits active vert wall from below"
   end?
   BALL-HITS-ACTIVE-VWALL-FROM-BELOW)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-VWALL-FROM-BELOW)
params : (#<procedure:end?> #(struct:world (#(struct:ball 380 220 -1 -10)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 380 191 380 209) VERTICAL 1 #t))

Test Case: 
  (test-equal?
   "ball right above full horiz wall: x"
   (world-ball-x BALL-BEFORE-HWALL1)
   (+ CENTER-X WALL-TIME-TO-FULL))
Test Result: Success

Test Case: 
  (test-equal?
   "ball flush against full horiz wall from top: y"
   (world-ball-y (next-world BALL-BEFORE-HWALL1))
   (- BALL-Y-BOT RADIUS))
Test Result: Failure
actual : 369
expected : 360
expression : (check-equal? (world-ball-y (next-world BALL-BEFORE-HWALL1)) (- BALL-Y-BOT RADIUS))
params : (369 360)

Test Case: 
  (test-pred "ball hits active horiz wall from top" end? BALL-HITS-ACTIVE-HWALL1)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-HWALL1)
params : (#<procedure:end?> #(struct:world (#(struct:ball 224 361 1 10)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 7 380 393 380) HORIZONTAL 1 #t))

Test Case: 
  (test-equal?
   "ball flush against full horiz wall from bottom: y"
   (world-ball-y (next-world BALL-BEFORE-HWALL2))
   (+ BALL-Y-TOP RADIUS))
Test Result: Failure
actual : 31
expected : 40
expression : (check-equal? (world-ball-y (next-world BALL-BEFORE-HWALL2)) (+ BALL-Y-TOP RADIUS))
params : (31 40)

Test Case: 
  (test-pred
   "ball hits active horiz wall from bottom"
   end?
   BALL-HITS-ACTIVE-HWALL2)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-HWALL2)
params : (#<procedure:end?> #(struct:world (#(struct:ball 224 39 1 -10)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 7 20 393 20) HORIZONTAL 1 #t))

Test Case: 
  (test-pred
   "ball hits active horiz wall from right"
   end?
   BALL-HITS-ACTIVE-HWALL-FROM-RIGHT)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-HWALL-FROM-RIGHT)
params : (#<procedure:end?> #(struct:world (#(struct:ball 220 380 -10 -1)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 191 380 209 380) HORIZONTAL 1 #t))

Test Case: 
  (test-pred
   "ball hits active horiz wall from left"
   end?
   BALL-HITS-ACTIVE-HWALL-FROM-LEFT)
Test Result: Failure
expression : (check-pred end? BALL-HITS-ACTIVE-HWALL-FROM-LEFT)
params : (#<procedure:end?> #(struct:world (#(struct:ball 180 380 10 -1)) (#(struct:wall 0 0 0 400) #(struct:wall 400 0 400 400) #(struct:wall 0 0 400 0) #(struct:wall 0 400 400 400)) 0 #(struct:wall 191 380 209 380) HORIZONTAL 1 #t))

Test Case: 
  (test-equal? "before level up to 2: level 1" (level BEFORE-LEVELUPTO2) 1)
Test Result: Success

Test Case: 
  (test-equal?
   "level up to 2 (give 1 tick leeway)"
   (level (next-world LEVEL2))
   2)
Test Result: Failure
actual : 1
expected : 2
expression : (check-equal? (level (next-world LEVEL2)) 2)
params : (1 2)

Test Case: 
  (test-equal?
   "level up to 3 (give 1 tick leeway)"
   (level (next-world LEVEL3))
   3)
Test Result: Failure
actual : 2
expected : 3
expression : (check-equal? (level (next-world LEVEL3)) 3)
params : (2 3)

Test Case: 
  (test-pred "before level up to 2: 0 score" zero? (score BEFORE-LEVELUPTO2))
Test Result: Success

Test Case: 
  (test-equal?
   "score after full vwall: 20/400*100 (give 1 tick leeway)"
   (score (next-world BALL-BEFORE-VWALL1))
   5)
Test Result: Failure
actual : 0
expected : 5
expression : (check-equal? (score (next-world BALL-BEFORE-VWALL1)) 5)
params : (0 5)

Test Case: 
  (test-equal?
   "score after full hwall: 20/400*100 (give 1 tick leeway)"
   (score (next-world BALL-BEFORE-HWALL1))
   5)
Test Result: Failure
actual : 0
expected : 5
expression : (check-equal? (score (next-world BALL-BEFORE-HWALL1)) 5)
params : (0 5)


Results for Suite walls-tests:
  Test Successes: 4
  Test Failures: 16
  Test Errors: 0

Raw Score: 4/20
Normalized Score: 2/10


Overall Results:
  Test Successes: 4
  Test Failures: 16
  Test Errors: 0

Raw Score: 4/20
Normalized Score: 2/10

